user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log debug;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=100r/s;
    limit_req zone=mylimit burst=100 nodelay;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name localhost;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/server.crt;
        ssl_certificate_key /etc/nginx/server.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES256-GCM-SHA384:DHE-DSS-AES256-GCM-SHA384";
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Main location to serve the frontend and handle authentication
        location / {
            #auth_request /auth/validate;
            #resolver 127.0.0.11 valid=30s;
            proxy_pass http://frontend:8080;
            include /etc/nginx/proxy_params.conf;
        }
        #Authentication API accessible without token for login purposes
        location /auth/ {
            resolver 127.0.0.11 valid=30s;
            proxy_pass http://auth-service:3000/;
            include /etc/nginx/proxy_params.conf;
        }

        # Validate token
        location /auth/validate {
            proxy_pass http://auth-service:3000/auth/validate;
            proxy_set_header Content-Length "";
            proxy_pass_request_body off;
        }


        # Backend API
        location /api/ {
            auth_request /auth/validate;
            error_page 401 = @error401;
            proxy_pass http://backend:5000/;
            include /etc/nginx/proxy_params.conf;
        }

        ##Jellyfin Media Server
        #location /jellyfin/ {
        #    auth_request /auth/validate;
        #    error_page 401 = @error401;
        #    resolver 127.0.0.11 valid=30s;
        #    proxy_pass http://jellyfin:8096;
        #    include /etc/nginx/proxy_params.conf;
        #}

        # Stremio Web
        location /stremio-web/ {
            #auth_request /auth/validate;
            error_page 401 = @error401;
            resolver 127.0.0.11 valid=30s;
            rewrite ^/stremio-web/(.*)$ /$1 break;
            proxy_pass http://stremio-web:8080;
            include /etc/nginx/proxy_params.conf;
        }

        # Fallback location for unauthorized access
        location @error401 {
            return 302 /login;  # Redirect to the frontend login page
        }

        if ($http_user_agent ~* "wget|curl|bot|spider|crawl") {
            return 403;
        }

    }

}

